package com.cattlebreed.app.utils

import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Paint
import android.graphics.pdf.PdfDocument
import android.graphics.pdf.PdfDocument.PageInfo
import com.cattlebreed.app.data.entity.AnimalRecord
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.*

class PDFUtils(private val context: Context) {
    
    companion object {
        private const val PAGE_WIDTH = 595 // A4 width in points
        private const val PAGE_HEIGHT = 842 // A4 height in points
        private const val MARGIN = 50
        private const val LINE_HEIGHT = 20
        private const val TITLE_SIZE = 24f
        private const val HEADING_SIZE = 18f
        private const val BODY_SIZE = 14f
        private const val SMALL_SIZE = 12f
    }
    
    fun exportToPDF(records: List<AnimalRecord>, outputDir: File): File {
        val timestamp = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(Date())
        val fileName = "cattle_records_$timestamp.pdf"
        val outputFile = File(outputDir, fileName)
        
        val document = PdfDocument()
        
        try {
            // Create cover page
            createCoverPage(document, records.size)
            
            // Create individual record pages
            records.forEach { record ->
                createRecordPage(document, record)
            }
            
            // Create summary page
            if (records.isNotEmpty()) {
                createSummaryPage(document, records)
            }
            
            // Save document
            val fileOutputStream = FileOutputStream(outputFile)
            document.writeTo(fileOutputStream)
            fileOutputStream.close()
            document.close()
            
        } catch (e: IOException) {
            document.close()
            throw e
        }
        
        return outputFile
    }
    
    private fun createCoverPage(document: PdfDocument, recordCount: Int) {
        val pageInfo = PageInfo.Builder(PAGE_WIDTH, PAGE_HEIGHT, 1).create()
        val page = document.startPage(pageInfo)
        val canvas = page.canvas
        
        // Title Paint
        val titlePaint = Paint().apply {
            textSize = TITLE_SIZE
            color = android.graphics.Color.BLACK
            isFakeBoldText = true
            textAlign = Paint.Align.CENTER
        }
        
        // Body Paint
        val bodyPaint = Paint().apply {
            textSize = BODY_SIZE
            color = android.graphics.Color.BLACK
            textAlign = Paint.Align.CENTER
        }
        
        val smallPaint = Paint().apply {
            textSize = SMALL_SIZE
            color = android.graphics.Color.GRAY
            textAlign = Paint.Align.CENTER
        }
        
        var yPos = 150f
        
        // Main Title
        canvas.drawText("पशु नस्ल मूल्यांकन रिपोर्ट", PAGE_WIDTH / 2f, yPos, titlePaint)
        yPos += 40
        canvas.drawText("Cattle Breed Assessment Report", PAGE_WIDTH / 2f, yPos, titlePaint)
        yPos += 80
        
        // Report Info
        canvas.drawText("कुल रिकॉर्ड / Total Records: $recordCount", PAGE_WIDTH / 2f, yPos, bodyPaint)
        yPos += 40
        
        val dateFormat = SimpleDateFormat("dd MMMM yyyy", Locale.getDefault())
        val currentDate = dateFormat.format(Date())
        canvas.drawText("रिपोर्ट दिनांक / Report Date: $currentDate", PAGE_WIDTH / 2f, yPos, bodyPaint)
        yPos += 100
        
        // Instructions in Hindi and English
        val instructions = listOf(
            "यह रिपोर्ट आपके पशुओं की विस्तृत जानकारी प्रदान करती है।",
            "This report provides detailed information about your cattle.",
            "",
            "प्रत्येक पशु के लिए शामिल जानकारी:",
            "Information included for each animal:",
            "• फोटो और पहचान / Photo and Identification", 
            "• शरीरिक माप / Body Measurements",
            "• ATC स्कोर और विश्लेषण / ATC Score and Analysis",
            "• रिकॉर्डिंग की तारीख / Recording Date"
        )
        
        bodyPaint.textAlign = Paint.Align.LEFT
        instructions.forEach { instruction ->
            if (instruction.isNotEmpty()) {
                canvas.drawText(instruction, MARGIN.toFloat(), yPos, bodyPaint)
            }
            yPos += LINE_HEIGHT
        }
        
        // Footer
        canvas.drawText(
            "Generated by Cattle Breed Assessment App", 
            PAGE_WIDTH / 2f, 
            PAGE_HEIGHT - 50f, 
            smallPaint
        )
        
        document.finishPage(page)
    }
    
    private fun createRecordPage(document: PdfDocument, record: AnimalRecord) {
        val pageInfo = PageInfo.Builder(PAGE_WIDTH, PAGE_HEIGHT, document.pages.size + 1).create()
        val page = document.startPage(pageInfo)
        val canvas = page.canvas
        
        // Paint objects
        val headingPaint = Paint().apply {
            textSize = HEADING_SIZE
            color = android.graphics.Color.BLACK
            isFakeBoldText = true
        }
        
        val bodyPaint = Paint().apply {
            textSize = BODY_SIZE
            color = android.graphics.Color.BLACK
        }
        
        val smallPaint = Paint().apply {
            textSize = SMALL_SIZE
            color = android.graphics.Color.GRAY
        }
        
        var yPos = MARGIN + 20f
        
        // Record Header
        canvas.drawText("पशु रिकॉर्ड / Animal Record", MARGIN.toFloat(), yPos, headingPaint)
        yPos += 40
        
        // Animal ID
        canvas.drawText("पशु आईडी / Animal ID: ${record.animalId}", MARGIN.toFloat(), yPos, bodyPaint)
        yPos += LINE_HEIGHT + 10
        
        // Date
        val dateFormat = SimpleDateFormat("dd MMMM yyyy, HH:mm", Locale.getDefault())
        canvas.drawText(
            "रिकॉर्डिंग दिनांक / Recording Date: ${dateFormat.format(record.date)}", 
            MARGIN.toFloat(), yPos, bodyPaint
        )
        yPos += 40
        
        // Try to load and draw image
        try {
            val imageFile = File(record.imagePath)
            if (imageFile.exists()) {
                val bitmap = BitmapFactory.decodeFile(record.imagePath)
                if (bitmap != null) {
                    val scaledBitmap = scaleBitmapToFit(bitmap, 200, 150)
                    canvas.drawBitmap(scaledBitmap, MARGIN.toFloat(), yPos, null)
                    yPos += 160
                    scaledBitmap.recycle()
                }
            }
        } catch (e: Exception) {
            canvas.drawText("तस्वीर उपलब्ध नहीं / Image not available", MARGIN.toFloat(), yPos, smallPaint)
            yPos += 30
        }
        
        // Body Measurements
        yPos += 20
        canvas.drawText("शरीरिक माप / Body Measurements", MARGIN.toFloat(), yPos, headingPaint)
        yPos += 30
        
        val measurements = listOf(
            "शरीर की लंबाई / Body Length: ${record.bodyLength.toInt()} cm",
            "ऊंचाई / Height: ${record.height.toInt()} cm", 
            "छाती की चौड़ाई / Chest Width: ${record.chestWidth.toInt()} cm",
            "कमर का कोण / Rump Angle: ${record.rumpAngle.toInt()}°"
        )
        
        measurements.forEach { measurement ->
            canvas.drawText(measurement, MARGIN.toFloat(), yPos, bodyPaint)
            yPos += LINE_HEIGHT + 5
        }
        
        // ATC Score Analysis
        yPos += 20
        canvas.drawText("ATC स्कोर विश्लेषण / ATC Score Analysis", MARGIN.toFloat(), yPos, headingPaint)
        yPos += 30
        
        canvas.drawText("ATC स्कोर / ATC Score: ${record.atcScore}", MARGIN.toFloat(), yPos, bodyPaint)
        yPos += LINE_HEIGHT + 10
        
        val analysis = when {
            record.atcScore >= 85 -> "उत्कृष्ट स्थिति और संरचना / Excellent condition and conformation"
            record.atcScore >= 70 -> "अच्छी स्थिति, मामूली सुधार की आवश्यकता / Good condition with minor improvements needed"
            else -> "सामान्य स्थिति, ध्यान की आवश्यकता / Fair condition requiring attention"
        }
        
        canvas.drawText("विश्लेषण / Analysis:", MARGIN.toFloat(), yPos, bodyPaint)
        yPos += LINE_HEIGHT + 5
        canvas.drawText(analysis, MARGIN.toFloat(), yPos, bodyPaint)
        yPos += 30
        
        // Sync Status
        val syncStatus = if (record.synced) {
            "सिंक हो गया / Synced to cloud"
        } else {
            "सिंक नहीं हुआ / Not synced"
        }
        canvas.drawText("सिंक स्थिति / Sync Status: $syncStatus", MARGIN.toFloat(), yPos, smallPaint)
        
        // Page number
        canvas.drawText(
            "Page ${document.pages.size}", 
            PAGE_WIDTH - MARGIN.toFloat(), 
            PAGE_HEIGHT - 30f, 
            smallPaint
        )
        
        document.finishPage(page)
    }
    
    private fun createSummaryPage(document: PdfDocument, records: List<AnimalRecord>) {
        val pageInfo = PageInfo.Builder(PAGE_WIDTH, PAGE_HEIGHT, document.pages.size + 1).create()
        val page = document.startPage(pageInfo)
        val canvas = page.canvas
        
        val headingPaint = Paint().apply {
            textSize = HEADING_SIZE
            color = android.graphics.Color.BLACK
            isFakeBoldText = true
        }
        
        val bodyPaint = Paint().apply {
            textSize = BODY_SIZE
            color = android.graphics.Color.BLACK
        }
        
        var yPos = MARGIN + 20f
        
        // Summary Header
        canvas.drawText("सारांश / Summary", MARGIN.toFloat(), yPos, headingPaint)
        yPos += 40
        
        // Statistics
        val totalRecords = records.size
        val avgAtcScore = records.map { it.atcScore }.average()
        val excellentCount = records.count { it.atcScore >= 85 }
        val goodCount = records.count { it.atcScore >= 70 && it.atcScore < 85 }
        val fairCount = records.count { it.atcScore < 70 }
        
        val avgBodyLength = records.map { it.bodyLength }.average()
        val avgHeight = records.map { it.height }.average()
        val avgChestWidth = records.map { it.chestWidth }.average()
        
        val summaryData = listOf(
            "कुल पशु / Total Animals: $totalRecords",
            "औसत ATC स्कोर / Average ATC Score: ${"%.1f".format(avgAtcScore)}",
            "",
            "ATC स्कोर वितरण / ATC Score Distribution:",
            "  उत्कृष्ट (85+) / Excellent (85+): $excellentCount",
            "  अच्छा (70-84) / Good (70-84): $goodCount", 
            "  सामान्य (<70) / Fair (<70): $fairCount",
            "",
            "औसत माप / Average Measurements:",
            "  शरीर की लंबाई / Body Length: ${"%.1f".format(avgBodyLength)} cm",
            "  ऊंचाई / Height: ${"%.1f".format(avgHeight)} cm",
            "  छाती की चौड़ाई / Chest Width: ${"%.1f".format(avgChestWidth)} cm"
        )
        
        summaryData.forEach { data ->
            if (data.isNotEmpty()) {
                canvas.drawText(data, MARGIN.toFloat(), yPos, bodyPaint)
            }
            yPos += LINE_HEIGHT + 2
        }
        
        document.finishPage(page)
    }
    
    private fun scaleBitmapToFit(bitmap: Bitmap, maxWidth: Int, maxHeight: Int): Bitmap {
        val aspectRatio = bitmap.width.toFloat() / bitmap.height.toFloat()
        
        val (scaledWidth, scaledHeight) = if (aspectRatio > 1) {
            // Landscape
            val width = minOf(maxWidth, bitmap.width)
            val height = (width / aspectRatio).toInt()
            width to height
        } else {
            // Portrait or square
            val height = minOf(maxHeight, bitmap.height)
            val width = (height * aspectRatio).toInt()
            width to height
        }
        
        return Bitmap.createScaledBitmap(bitmap, scaledWidth, scaledHeight, true)
    }
}